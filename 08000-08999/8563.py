'''
문제 : N(N <= 1000)개의 원판으로 이루어진 하노이탑을 2번째 탑에는 홀수번째 원판,
3번째 탑에는 짝수번째 원판만 오도록 만들려고 할 때 최소 이동 횟수를 구한다.
처음에는 모든 원판이 1번째 탑에 있고, 모든 규칙은 일반 하노이탑과 같다.

해결 방법 : 처음에는 하노이탑의 위쪽 원판들이 1번째 탑에 있기 때문에
밑에서 2번째와 그 위의 원판들을 제 위치로 옮기면 가장 밑 원판도 한번에 제 위치로 갈 수 있다.
하지만 그 다음에는 위쪽 원판들이 2번째 또는 3번째 탑에 있기 때문에 밑에서 2번째 원판을 바로 제 위치로 옮길 수 없다.
이렇게 하면 다시 1번째 탑으로 돌아오기 때문에 위 2가지를 반복하게 된다.
이를 2진법으로 나타내면 101101101...이 N자리 반복되는 형태가 되기 때문에 이 값을 구해주면 된다.

주요 알고리즘 : 수학, 빅인티저

출처 : PA 2001 4-1번
'''

n = int(input())
r = 0
for i in range(n):
    r *= 2
    if i % 3 != 1:
        r += 1

print(r)
